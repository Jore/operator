{
  "name": "estrattonbailey/operator.js",
  "version": "0.1.4",
  "libraries": {
    "xv": "^1.1.21"
  },
  "title": "Operator",
  "branch": "",
  "style": {
    "name": "Swiss",
    "componentSet": {
      "nav": "nav/BasicNav",
      "header": "header/SwissHeader",
      "article": "article/SwissArticle",
      "footer": "footer/BasicFooter"
    },
    "fontFamily": "\"Helvetica Neue\", Helvetica, Arial, sans-serif",
    "heading": {
      "fontWeight": 700,
      "letterSpacing": "-0.01em"
    },
    "layout": {
      "fluid": true
    },
    "colors": {
      "text": "#000",
      "background": "#fff",
      "primary": "#05a",
      "secondary": "#444",
      "highlight": "#f30",
      "border": "#ccc",
      "muted": "#eee"
    }
  },
  "content": [
    {
      "component": "nav",
      "links": [
        {
          "href": "https://github.com/estrattonbailey/operator.js",
          "text": "GitHub"
        },
        {
          "href": "https://npmjs.com/package/operator.js",
          "text": "npm"
        }
      ]
    },
    {
      "component": "header",
      "heading": "operator.js",
      "subhead": "An AJAX + routing library that transforms a normal site into a Single Page Application (SPA).",
      "children": [
        {
          "component": "ui/TweetButton",
          "text": "operator.js: An AJAX + routing library that transforms a normal site into a Single Page Application (SPA).",
          "url": ""
        },
        {
          "component": "ui/GithubButton",
          "user": "estrattonbailey",
          "repo": "operator.js"
        }
      ],
      "text": "v1.0.4"
    },
    {
      "component": "article",
      "metadata": {
        "source": "github.readme"
      },
      "html": "<h1>Operator <a href=\"https://www.npmjs.com/package/operator.js\"><img src=\"https://img.shields.io/npm/v/operator.js.svg?maxAge=2592000\"></a></h1>\n\n<p><strong>6.06kb gzipped.</strong></p>\n<h2>Install</h2>\n<pre>npm i operator.js --save</pre><h2>Usage</h2>\n<pre><span class=\"hljs-keyword\">import</span> operator <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&apos;operator.js&apos;</span>\n\n<span class=\"hljs-keyword\">const</span> app = operator({\n  root: <span class=\"hljs-string\">&apos;#root&apos;</span>,\n  duration: <span class=\"hljs-number\">200</span>, <span class=\"hljs-comment\">// transition duration</span>\n  ignore: [\n    route =&gt; <span class=\"hljs-regexp\">/logout/</span>.test(route)\n  ]\n})</pre><h2>Options</h2>\n<p>Operator accepts a single options object with the following keys:</p>\n<h4>root</h4>\n<p>A selector for the root element of your site</p>\n<pre><span class=\"hljs-keyword\">const</span> app = operator({\n  root: <span class=\"hljs-string\">&apos;.js-root-element&apos;</span>\n})</pre><h4>duration (optional)</h4>\n<p>Page transition duration, if desired. Operator adds an <code>is-transitioning</code> class to the <code>documentElement</code> while navigating for the duration provided here. <code>default: 0</code></p>\n<pre><span class=\"hljs-keyword\">const</span> app = operator({\n  root: <span class=\"hljs-string\">&apos;.js-root-element&apos;</span>,\n  duration: <span class=\"hljs-number\">1000</span>\n})</pre><h4>ignore (optional)</h4>\n<p>An <code>array</code> of functions to test against the route. <strong>Functions must return booleans.</strong> If a test returns true, the route is followed via normal page load instead of AJAX. In the below example, routes matching <code>products</code> will be ignored:</p>\n<pre><span class=\"hljs-keyword\">const</span> app = operator({\n  root: <span class=\"hljs-string\">&apos;.js-root-element&apos;</span>,\n  ignore: [\n    route =&gt; <span class=\"hljs-regexp\">/products/</span>.test(route)\n  ]\n})</pre><p>Optionally, you can pass a sub-array containing a <code>name</code> value <em>and</em> a test function. If the test returns true, an event (<code>name</code>) is emitted with an object as payload. The payload object contains the native DOM event object returned from <a href=\"https://github.com/zenorocha/delegate\">delegate</a> and the matched route:</p>\n<pre><span class=\"hljs-keyword\">const</span> app = operator({\n  root: <span class=\"hljs-string\">&apos;#root&apos;</span>,\n  ignore: [\n    [<span class=\"hljs-string\">&apos;products&apos;</span>, route =&gt; <span class=\"hljs-regexp\">/products/</span>.test(route)]\n  ]\n})\n\napp.on(<span class=\"hljs-string\">&apos;products&apos;</span>, ({event, route}) =&gt; {\n  <span class=\"hljs-comment\">// do stuff</span>\n  <span class=\"hljs-comment\">// you can also event.preventDefault()</span>\n})</pre><h2>API</h2>\n<pre><span class=\"hljs-keyword\">import</span> operator <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&apos;operator.js&apos;</span></pre><h3>.on(event, callback)</h3>\n<p>Operator emits the following events:</p>\n<h4>before:route</h4>\n<p>Before the route is resolved and the page loaded. The callback recieves the route to be resolved.</p>\n<pre>operator.on(<span class=\"hljs-string\">&apos;before:route&apos;</span>, ({ route }) =&gt; {\n  <span class=\"hljs-comment\">// do stuff  </span>\n})</pre><h4>after:route</h4>\n<p>After the route is resolved and the page loaded. The callback recieves the new route and page title.</p>\n<pre>operator.on(<span class=\"hljs-string\">&apos;after:route&apos;</span>, ({ route, title }) =&gt; {\n  <span class=\"hljs-comment\">// do stuff  </span>\n})</pre><h4>before:transition</h4>\n<p>Before the page starts its transition. The callback recieves no params.</p>\n<pre>operator.on(<span class=\"hljs-string\">&apos;before:transition&apos;</span>, () =&gt; {\n  <span class=\"hljs-comment\">// do stuff  </span>\n})</pre><h4>after:transition</h4>\n<p>After the page completes its transition. The callback recieves no params.</p>\n<pre>operator.on(<span class=\"hljs-string\">&apos;after:transition&apos;</span>, () =&gt; {\n  <span class=\"hljs-comment\">// do stuff  </span>\n})</pre><h3>.go(route, callback)</h3>\n<p>Navigate to a given route.</p>\n<pre>operator.go(<span class=\"hljs-string\">&apos;/products&apos;</span>, (route, title) =&gt; {\n  <span class=\"hljs-comment\">// do stuff</span>\n})</pre><h3>.push(route)</h3>\n<p>Update History and set a new active URL, but don&apos;t fetch any data. Useful for manual route manipulation relating to UI changes.</p>\n<pre>operator.push(<span class=\"hljs-string\">&apos;/products/lightbox-open&apos;</span>)\n\n<span class=\"hljs-comment\">// or for hash</span>\noperator.push(<span class=\"hljs-string\">&apos;#anchor&apos;</span>)</pre><h3>.getState()</h3>\n<p>Returns an object with the current route and title values.</p>\n<pre>operator.getState() <span class=\"hljs-comment\">// { route: &apos;/products&apos;, title: &apos;Products&apos; }</span></pre><h2>Common Use Cases</h2>\n<h4>Anchors</h4>\n<p>By default, operator will ignore anchors and let native browser behavior take over. You can, however, intercept these hash events using the <code>ignore</code> option. The below example uses to <a href=\"https://github.com/callmecavs/jump.js\">jump.js</a> to smooth-scroll to the anchor target:</p>\n<pre><span class=\"hljs-keyword\">import</span> jump <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&apos;jump.js&apos;</span>\n\n<span class=\"hljs-keyword\">const</span> app = operator({\n  root: <span class=\"hljs-string\">&apos;#root&apos;</span>,\n  ignore: [\n    [<span class=\"hljs-string\">&apos;hash&apos;</span>, path =&gt; <span class=\"hljs-regexp\">/#/</span>.test(path)]\n  ]\n})\n\napp.on(<span class=\"hljs-string\">&apos;hash&apos;</span>, ({event}) =&gt; {\n  event.preventDefault()\n  <span class=\"hljs-keyword\">let</span> hash = event.delegateTarget.getAttribute(<span class=\"hljs-string\">&apos;href&apos;</span>)\n  jump(hash, { duration: <span class=\"hljs-number\">500</span> })\n})</pre><h4>Client-side Redirects</h4>\n<p>Using the <code>ignore</code> option, you can block a route and navigate to another, effectively creating a redirect. However, operator will <strong>not redirect on initial load.</strong> Currently.</p>\n<pre><span class=\"hljs-keyword\">const</span> app = operator({\n  root: <span class=\"hljs-string\">&apos;#root&apos;</span>,\n  ignore: [\n    [<span class=\"hljs-string\">&apos;products&apos;</span>, path =&gt; <span class=\"hljs-regexp\">/products/</span>.test(path)]\n  ]\n})\n\napp.on(<span class=\"hljs-string\">&apos;products&apos;</span>, ({event}) =&gt; {\n  event.preventDefault()\n  app.go(<span class=\"hljs-string\">&apos;/&apos;</span>)\n})</pre><h2>Dependencies</h2>\n<ul>\n<li><a href=\"https://github.com/zenorocha/delegate\">delegate:</a> Lightweight event delegation. by <a href=\"https://github.com/zenorocha\">@zenorocha</a></li>\n<li><a href=\"https://github.com/yanatan16/nanoajax\">nanoajax:</a> An ajax library you need a microscope to see. by <a href=\"https://github.com/yanatan16\">@yanatan16</a></li>\n<li><a href=\"https://github.com/krasimir/navigo\">navigo:</a> An ajax library you need a microscope to see. by <a href=\"https://github.com/krasimir\">@krasimir</a></li>\n<li><a href=\"https://github.com/callmecavs/loop.js\">loop.js:</a> Part of a knot. Loop is a bare-bones pub/sub style event emitter. by <a href=\"https://github.com/estrattonbailey\">@estrattonbailey</a></li>\n<li><a href=\"https://github.com/estrattonbailey/tarry.js\">tarry.js:</a> A really tiny sequencing library with support for delays. by <a href=\"https://github.com/estrattonbailey\">@estrattonbailey</a></li>\n</ul>\n<h2>Related Projects</h2>\n<ul>\n<li><a href=\"https://github.com/estrattonbailey/micromanager\">micromanager</a> Route-managed client-side binding controller in ES6. Useful for preventing double-bindings between pages. by <a href=\"https://github.com/estrattonbailey\">@estrattonbailey</a></li>\n<li><a href=\"https://github.com/callmecavs/jump.js\">jump.js</a> A small, modern, dependency-free smooth scrolling library. by <a href=\"https://github.com/callmecavs\">@callmecavs</a></li>\n</ul>\n<h2>TODO</h2>\n<ol>\n<li>On-page-load redirects?</li>\n</ol>\n<p>MIT License - Would love to hear your thoughts! :)</p>\n"
    },
    {
      "component": "footer",
      "links": [
        {
          "href": "https://github.com/estrattonbailey/operator.js",
          "text": "GitHub"
        },
        {
          "href": "https://github.com/estrattonbailey",
          "text": "estrattonbailey"
        }
      ]
    }
  ]
}